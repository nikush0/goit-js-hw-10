{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst button = document.querySelector('button[data-start]');\nconst textDays = document.querySelector('span[data-days]');\nconst textHours = document.querySelector('span[data-hours]');\nconst textMinutes = document.querySelector('span[data-minutes]');\nconst textSeconds = document.querySelector('span[data-seconds]');\n\nlet userSelectedDate = 0;\nlet intervalId = null;\n\nbutton.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] < options.defaultDate) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        maxWidth: 400,\n        position: 'topRight',\n      });\n      clear();\n    } else {\n      clear();\n      userSelectedDate = selectedDates[0];\n      button.disabled = false;\n    }\n  },\n};\n\nfunction clear() {\n  clearInterval(intervalId);\n  textDays.textContent = '00';\n  textHours.textContent = '00';\n  textMinutes.textContent = '00';\n  textSeconds.textContent = '00';\n}\n\nfunction getDate() {\n  const nowDate = userSelectedDate - new Date();\n  if (nowDate < 0) return;\n  convertMs(nowDate);\n  console.log(nowDate);\n}\n\nflatpickr('#datetime-picker', options);\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nconsole.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\nconsole.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n\nbutton.addEventListener('click', () => {\n  button.disabled = true;\n  intervalId = setInterval(() => {\n    getDate();\n  }, 1000);\n});\n"],"names":["button","textDays","textHours","textMinutes","textSeconds","userSelectedDate","intervalId","options","selectedDates","iziToast","clear","getDate","nowDate","flatpickr","convertMs","ms","days","hours","minutes","seconds"],"mappings":"2GAKA,MAAMA,EAAS,SAAS,cAAc,oBAAoB,EACpDC,EAAW,SAAS,cAAc,iBAAiB,EACnDC,EAAY,SAAS,cAAc,kBAAkB,EACrDC,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAc,SAAS,cAAc,oBAAoB,EAE/D,IAAIC,EAAmB,EACnBC,EAAa,KAEjBN,EAAO,SAAW,GAElB,MAAMO,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACjBA,EAAc,CAAC,EAAID,EAAQ,aAC7BE,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,IACV,SAAU,UAClB,CAAO,EACDC,MAEAA,IACAL,EAAmBG,EAAc,CAAC,EAClCR,EAAO,SAAW,GAErB,CACH,EAEA,SAASU,GAAQ,CACf,cAAcJ,CAAU,EACxBL,EAAS,YAAc,KACvBC,EAAU,YAAc,KACxBC,EAAY,YAAc,KAC1BC,EAAY,YAAc,IAC5B,CAEA,SAASO,GAAU,CACjB,MAAMC,EAAUP,EAAmB,IAAI,KACnCO,EAAU,GAEd,QAAQ,IAAIA,CAAO,CACrB,CAEAC,EAAU,mBAAoBN,CAAO,EAErC,SAASO,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,QAAQ,IAAIL,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAC7B,QAAQ,IAAIA,EAAU,MAAQ,CAAC,EAE/Bd,EAAO,iBAAiB,QAAS,IAAM,CACrCA,EAAO,SAAW,GAClBM,EAAa,YAAY,IAAM,CAC7BK,GACD,EAAE,GAAI,CACT,CAAC"}